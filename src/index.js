// src/index.js - Punto de entrada principal mejorado
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });

const app = require('./app');
const { sequelize } = require('./config/database');

const PORT = process.env.PORT || 3001;
const NODE_ENV = process.env.NODE_ENV || 'development';

/**
 * Funci√≥n para inicializar la base de datos y verificar conexiones
 */
async function initializeDatabase() {
  try {
    console.log('üîç Verificando conexi√≥n a la base de datos...');
    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n a MySQL establecida correctamente');

    // Verificar tablas cr√≠ticas
    const [tablas] = await sequelize.query("SHOW TABLES");
    const tablasRequeridas = [
      'pedidos', 'detalles_pedido', 'pagos', 'webpay_transacciones',
      'divisas', 'tipos_cambio', 'usuarios'
    ];
    
    const tablasExistentes = tablas.map(t => Object.values(t)[0]);
    const tablasFaltantes = tablasRequeridas.filter(t => !tablasExistentes.includes(t));
    
    if (tablasFaltantes.length > 0) {
      console.warn('‚ö†Ô∏è Tablas faltantes en BD:', tablasFaltantes);
    } else {
      console.log('‚úÖ Todas las tablas cr√≠ticas est√°n presentes');
    }

    // Solo sincronizar en desarrollo si es necesario
    if (NODE_ENV === 'development') {
      // await sequelize.sync({ alter: false });
      console.log('üîÑ Modelos verificados (sin sincronizaci√≥n autom√°tica)');
    }

    return true;
  } catch (error) {
    console.error('‚ùå Error en la base de datos:', error);
    throw error;
  }
}

/**
 * Funci√≥n para verificar integraciones externas
 */
async function verificarIntegraciones() {
  console.log('üîó Verificando integraciones externas...');
  
  const integraciones = {
    inventario: process.env.API_INVENTARIO_URL,
    banco_central: process.env.BANCO_API_URL,
    webpay: process.env.WEBPAY_API_URL
  };

  for (const [nombre, url] of Object.entries(integraciones)) {
    if (url) {
      console.log(`‚úÖ ${nombre}: ${url}`);
    } else {
      console.warn(`‚ö†Ô∏è ${nombre}: No configurado`);
    }
  }
}

/**
 * Funci√≥n principal para iniciar el servidor
 */
async function startServer() {
  try {
    console.log('üöÄ Iniciando API Banco FERREMAS...');
    console.log(`üìç Entorno: ${NODE_ENV}`);
    console.log(`üìç Puerto: ${PORT}`);
    
    // Inicializar base de datos
    await initializeDatabase();
    
    // Verificar integraciones
    await verificarIntegraciones();
    
    // Iniciar servidor HTTP
    const server = app.listen(PORT, () => {
      console.log('');
      console.log('üéâ ========================================');
      console.log('üè¶   API BANCO FERREMAS INICIADA        ');
      console.log('üéâ ========================================');
      console.log('');
      console.log(`üåê Servidor: http://localhost:${PORT}`);
      console.log(`üìö Documentaci√≥n: http://localhost:${PORT}/api/v1`);
      console.log(`üíì Health Check: http://localhost:${PORT}/health`);
      console.log('');
      console.log('üìã Endpoints principales:');
      console.log(`   üîê Auth: http://localhost:${PORT}/api/v1/auth`);
      console.log(`   üõí Ventas: http://localhost:${PORT}/api/v1/ventas`);
      console.log(`   üì¶ Pedidos: http://localhost:${PORT}/api/v1/pedidos`);
      console.log(`   üí≥ Pagos: http://localhost:${PORT}/api/v1/pagos`);
      console.log(`   üí∞ WebPay: http://localhost:${PORT}/api/v1/webpay`);
      console.log(`   üí± Divisas: http://localhost:${PORT}/api/v1/divisas`);
      console.log('');
      console.log('üîó Integraciones:');
      console.log(`   üì¶ Inventario: ${process.env.API_INVENTARIO_URL || 'No configurado'}`);
      console.log(`   üèõÔ∏è Banco Central: ${process.env.BANCO_API_URL || 'No configurado'}`);
      console.log(`   üí≥ WebPay: ${process.env.WEBPAY_API_URL || 'No configurado'}`);
      console.log('');
      console.log('‚úÖ Sistema listo para recibir peticiones');
    });

    // Manejo graceful de cierre del servidor
    process.on('SIGTERM', () => {
      console.log('üõë Se√±al SIGTERM recibida, cerrando servidor...');
      server.close(() => {
        console.log('‚úÖ Servidor cerrado correctamente');
        sequelize.close();
        process.exit(0);
      });
    });

    process.on('SIGINT', () => {
      console.log('üõë Se√±al SIGINT recibida, cerrando servidor...');
      server.close(() => {
        console.log('‚úÖ Servidor cerrado correctamente');
        sequelize.close();
        process.exit(0);
      });
    });

  } catch (error) {
    console.error('‚ùå Error cr√≠tico al iniciar el servidor:', error);
    console.error('');
    console.error('üí° Posibles soluciones:');
    console.error('   1. Verificar que MySQL est√© ejecut√°ndose');
    console.error('   2. Revisar credenciales en archivo .env');
    console.error('   3. Verificar que la base de datos existe');
    console.error('   4. Comprobar conectividad de red');
    console.error('');
    process.exit(1);
  }
}

// Manejo de errores no capturados
process.on('uncaughtException', (error) => {
  console.error('‚ùå Error no capturado:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Promise rechazada no manejada:', reason);
  console.error('En:', promise);
  process.exit(1);
});

// Iniciar la aplicaci√≥n
startServer();

// Exportar para testing
module.exports = { startServer, initializeDatabase };